package github

import (
	"fmt"
	"io"
	"net/http"
)

// GetPullRequests returns a list of pull requests for a given repository
func GetPullRequests(owner string, repo string) (ghpulls GHPulls, err error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl --request GET \
	//   --url https://api.github.com/repos/united-manufacturing-hub/united-manufacturing-hub/pulls \
	//   --header 'Accept: application/vnd.github.v3+json'

	var req *http.Request
	req, err = http.NewRequest("GET", fmt.Sprintf("https://api.github.com/repos/%s/%s/pulls", owner, repo), nil)
	if err != nil {
		return ghpulls, err
	}
	req.Header.Set("Accept", "application/vnd.github.v3+json")

	var resp *http.Response
	resp, err = http.DefaultClient.Do(req)
	if err != nil {
		return ghpulls, err
	}
	defer func(Body io.ReadCloser) {
		_ = Body.Close()
	}(resp.Body)

	var bytes []byte
	bytes, err = io.ReadAll(resp.Body)
	if err != nil {
		return ghpulls, err
	}
	var pulls GHPulls
	pulls, err = UnmarshalGHPulls(bytes)
	return pulls, err
}

type GHPulls []GHPull

func UnmarshalGHPulls(data []byte) (GHPulls, error) {
	var r GHPulls
	err := json.Unmarshal(data, &r)
	return r, err
}

func (r *GHPulls) Marshal() ([]byte, error) {
	return json.Marshal(r)
}

type GHPull struct {
	URL                string        `json:"url"`
	ID                 int64         `json:"id"`
	NodeID             string        `json:"node_id"`
	HTMLURL            string        `json:"html_url"`
	DiffURL            string        `json:"diff_url"`
	PatchURL           string        `json:"patch_url"`
	IssueURL           string        `json:"issue_url"`
	Number             int64         `json:"number"`
	State              string        `json:"state"`
	Locked             bool          `json:"locked"`
	Title              string        `json:"title"`
	User               User          `json:"user"`
	Body               string        `json:"body"`
	CreatedAt          string        `json:"created_at"`
	UpdatedAt          string        `json:"updated_at"`
	ClosedAt           interface{}   `json:"closed_at"`
	MergedAt           interface{}   `json:"merged_at"`
	MergeCommitSHA     string        `json:"merge_commit_sha"`
	Assignee           *User         `json:"assignee"`
	Assignees          []User        `json:"assignees"`
	RequestedReviewers []User        `json:"requested_reviewers"`
	RequestedTeams     []interface{} `json:"requested_teams"`
	Labels             []Label       `json:"labels"`
	Milestone          *Milestone    `json:"milestone"`
	Draft              bool          `json:"draft"`
	CommitsURL         string        `json:"commits_url"`
	ReviewCommentsURL  string        `json:"review_comments_url"`
	ReviewCommentURL   string        `json:"review_comment_url"`
	CommentsURL        string        `json:"comments_url"`
	StatusesURL        string        `json:"statuses_url"`
	Head               Head          `json:"head"`
	Base               Base          `json:"base"`
	Links              Links         `json:"_links"`
	AuthorAssociation  string        `json:"author_association"`
	AutoMerge          *AutoMerge    `json:"auto_merge"`
	ActiveLockReason   interface{}   `json:"active_lock_reason"`
}

type User struct {
	Login             string `json:"login"`
	ID                int64  `json:"id"`
	NodeID            string `json:"node_id"`
	AvatarURL         string `json:"avatar_url"`
	GravatarID        string `json:"gravatar_id"`
	URL               string `json:"url"`
	HTMLURL           string `json:"html_url"`
	FollowersURL      string `json:"followers_url"`
	FollowingURL      string `json:"following_url"`
	GistsURL          string `json:"gists_url"`
	StarredURL        string `json:"starred_url"`
	SubscriptionsURL  string `json:"subscriptions_url"`
	OrganizationsURL  string `json:"organizations_url"`
	ReposURL          string `json:"repos_url"`
	EventsURL         string `json:"events_url"`
	ReceivedEventsURL string `json:"received_events_url"`
	Type              string `json:"type"`
	SiteAdmin         bool   `json:"site_admin"`
}

type AutoMerge struct {
	EnabledBy     User   `json:"enabled_by"`
	MergeMethod   string `json:"merge_method"`
	CommitTitle   string `json:"commit_title"`
	CommitMessage string `json:"commit_message"`
}

type Base struct {
	Label string   `json:"label"`
	Ref   string   `json:"ref"`
	SHA   string   `json:"sha"`
	User  User     `json:"user"`
	Repo  BaseRepo `json:"repo"`
}

type BaseRepo struct {
	ID               int64         `json:"id"`
	NodeID           string        `json:"node_id"`
	Name             string        `json:"name"`
	FullName         string        `json:"full_name"`
	Private          bool          `json:"private"`
	Owner            User          `json:"owner"`
	HTMLURL          string        `json:"html_url"`
	Description      string        `json:"description"`
	Fork             bool          `json:"fork"`
	URL              string        `json:"url"`
	ForksURL         string        `json:"forks_url"`
	KeysURL          string        `json:"keys_url"`
	CollaboratorsURL string        `json:"collaborators_url"`
	TeamsURL         string        `json:"teams_url"`
	HooksURL         string        `json:"hooks_url"`
	IssueEventsURL   string        `json:"issue_events_url"`
	EventsURL        string        `json:"events_url"`
	AssigneesURL     string        `json:"assignees_url"`
	BranchesURL      string        `json:"branches_url"`
	TagsURL          string        `json:"tags_url"`
	BlobsURL         string        `json:"blobs_url"`
	GitTagsURL       string        `json:"git_tags_url"`
	GitRefsURL       string        `json:"git_refs_url"`
	TreesURL         string        `json:"trees_url"`
	StatusesURL      string        `json:"statuses_url"`
	LanguagesURL     string        `json:"languages_url"`
	StargazersURL    string        `json:"stargazers_url"`
	ContributorsURL  string        `json:"contributors_url"`
	SubscribersURL   string        `json:"subscribers_url"`
	SubscriptionURL  string        `json:"subscription_url"`
	CommitsURL       string        `json:"commits_url"`
	GitCommitsURL    string        `json:"git_commits_url"`
	CommentsURL      string        `json:"comments_url"`
	IssueCommentURL  string        `json:"issue_comment_url"`
	ContentsURL      string        `json:"contents_url"`
	CompareURL       string        `json:"compare_url"`
	MergesURL        string        `json:"merges_url"`
	ArchiveURL       string        `json:"archive_url"`
	DownloadsURL     string        `json:"downloads_url"`
	IssuesURL        string        `json:"issues_url"`
	PullsURL         string        `json:"pulls_url"`
	MilestonesURL    string        `json:"milestones_url"`
	NotificationsURL string        `json:"notifications_url"`
	LabelsURL        string        `json:"labels_url"`
	ReleasesURL      string        `json:"releases_url"`
	DeploymentsURL   string        `json:"deployments_url"`
	CreatedAt        string        `json:"created_at"`
	UpdatedAt        string        `json:"updated_at"`
	PushedAt         string        `json:"pushed_at"`
	GitURL           string        `json:"git_url"`
	SSHURL           string        `json:"ssh_url"`
	CloneURL         string        `json:"clone_url"`
	SvnURL           string        `json:"svn_url"`
	Homepage         string        `json:"homepage"`
	Size             int64         `json:"size"`
	StargazersCount  int64         `json:"stargazers_count"`
	WatchersCount    int64         `json:"watchers_count"`
	Language         string        `json:"language"`
	HasIssues        bool          `json:"has_issues"`
	HasProjects      bool          `json:"has_projects"`
	HasDownloads     bool          `json:"has_downloads"`
	HasWiki          bool          `json:"has_wiki"`
	HasPages         bool          `json:"has_pages"`
	ForksCount       int64         `json:"forks_count"`
	MirrorURL        interface{}   `json:"mirror_url"`
	Archived         bool          `json:"archived"`
	Disabled         bool          `json:"disabled"`
	OpenIssuesCount  int64         `json:"open_issues_count"`
	License          PurpleLicense `json:"license"`
	AllowForking     bool          `json:"allow_forking"`
	IsTemplate       bool          `json:"is_template"`
	Topics           []Topic       `json:"topics"`
	Visibility       string        `json:"visibility"`
	Forks            int64         `json:"forks"`
	OpenIssues       int64         `json:"open_issues"`
	Watchers         int64         `json:"watchers"`
	DefaultBranch    string        `json:"default_branch"`
}

type PurpleLicense struct {
	Key    string `json:"key"`
	Name   string `json:"name"`
	SpdxID string `json:"spdx_id"`
	URL    string `json:"url"`
	NodeID string `json:"node_id"`
}

type Head struct {
	Label string   `json:"label"`
	Ref   string   `json:"ref"`
	SHA   string   `json:"sha"`
	User  User     `json:"user"`
	Repo  HeadRepo `json:"repo"`
}

type HeadRepo struct {
	ID               int64         `json:"id"`
	NodeID           string        `json:"node_id"`
	Name             string        `json:"name"`
	FullName         string        `json:"full_name"`
	Private          bool          `json:"private"`
	Owner            User          `json:"owner"`
	HTMLURL          string        `json:"html_url"`
	Description      string        `json:"description"`
	Fork             bool          `json:"fork"`
	URL              string        `json:"url"`
	ForksURL         string        `json:"forks_url"`
	KeysURL          string        `json:"keys_url"`
	CollaboratorsURL string        `json:"collaborators_url"`
	TeamsURL         string        `json:"teams_url"`
	HooksURL         string        `json:"hooks_url"`
	IssueEventsURL   string        `json:"issue_events_url"`
	EventsURL        string        `json:"events_url"`
	AssigneesURL     string        `json:"assignees_url"`
	BranchesURL      string        `json:"branches_url"`
	TagsURL          string        `json:"tags_url"`
	BlobsURL         string        `json:"blobs_url"`
	GitTagsURL       string        `json:"git_tags_url"`
	GitRefsURL       string        `json:"git_refs_url"`
	TreesURL         string        `json:"trees_url"`
	StatusesURL      string        `json:"statuses_url"`
	LanguagesURL     string        `json:"languages_url"`
	StargazersURL    string        `json:"stargazers_url"`
	ContributorsURL  string        `json:"contributors_url"`
	SubscribersURL   string        `json:"subscribers_url"`
	SubscriptionURL  string        `json:"subscription_url"`
	CommitsURL       string        `json:"commits_url"`
	GitCommitsURL    string        `json:"git_commits_url"`
	CommentsURL      string        `json:"comments_url"`
	IssueCommentURL  string        `json:"issue_comment_url"`
	ContentsURL      string        `json:"contents_url"`
	CompareURL       string        `json:"compare_url"`
	MergesURL        string        `json:"merges_url"`
	ArchiveURL       string        `json:"archive_url"`
	DownloadsURL     string        `json:"downloads_url"`
	IssuesURL        string        `json:"issues_url"`
	PullsURL         string        `json:"pulls_url"`
	MilestonesURL    string        `json:"milestones_url"`
	NotificationsURL string        `json:"notifications_url"`
	LabelsURL        string        `json:"labels_url"`
	ReleasesURL      string        `json:"releases_url"`
	DeploymentsURL   string        `json:"deployments_url"`
	CreatedAt        string        `json:"created_at"`
	UpdatedAt        string        `json:"updated_at"`
	PushedAt         string        `json:"pushed_at"`
	GitURL           string        `json:"git_url"`
	SSHURL           string        `json:"ssh_url"`
	CloneURL         string        `json:"clone_url"`
	SvnURL           string        `json:"svn_url"`
	Homepage         string        `json:"homepage"`
	Size             int64         `json:"size"`
	StargazersCount  int64         `json:"stargazers_count"`
	WatchersCount    int64         `json:"watchers_count"`
	Language         *string       `json:"language"`
	HasIssues        bool          `json:"has_issues"`
	HasProjects      bool          `json:"has_projects"`
	HasDownloads     bool          `json:"has_downloads"`
	HasWiki          bool          `json:"has_wiki"`
	HasPages         bool          `json:"has_pages"`
	ForksCount       int64         `json:"forks_count"`
	MirrorURL        interface{}   `json:"mirror_url"`
	Archived         bool          `json:"archived"`
	Disabled         bool          `json:"disabled"`
	OpenIssuesCount  int64         `json:"open_issues_count"`
	License          FluffyLicense `json:"license"`
	AllowForking     bool          `json:"allow_forking"`
	IsTemplate       bool          `json:"is_template"`
	Topics           []Topic       `json:"topics"`
	Visibility       string        `json:"visibility"`
	Forks            int64         `json:"forks"`
	OpenIssues       int64         `json:"open_issues"`
	Watchers         int64         `json:"watchers"`
	DefaultBranch    string        `json:"default_branch"`
}

type FluffyLicense struct {
	Key    string  `json:"key"`
	Name   string  `json:"name"`
	SpdxID string  `json:"spdx_id"`
	URL    *string `json:"url"`
	NodeID string  `json:"node_id"`
}

type Label struct {
	ID          int64  `json:"id"`
	NodeID      string `json:"node_id"`
	URL         string `json:"url"`
	Name        string `json:"name"`
	Color       string `json:"color"`
	Default     bool   `json:"default"`
	Description string `json:"description"`
}

type Links struct {
	Self           Comments      `json:"self"`
	HTML           Comments      `json:"html"`
	Issue          Comments      `json:"issue"`
	Comments       Comments      `json:"comments"`
	ReviewComments Comments      `json:"review_comments"`
	ReviewComment  ReviewComment `json:"review_comment"`
	Commits        Comments      `json:"commits"`
	Statuses       Comments      `json:"statuses"`
}

type Comments struct {
	Href string `json:"href"`
}

type ReviewComment struct {
	Href string `json:"href"`
}

type Milestone struct {
	URL          string      `json:"url"`
	HTMLURL      string      `json:"html_url"`
	LabelsURL    string      `json:"labels_url"`
	ID           int64       `json:"id"`
	NodeID       string      `json:"node_id"`
	Number       int64       `json:"number"`
	Title        string      `json:"title"`
	Description  string      `json:"description"`
	Creator      User        `json:"creator"`
	OpenIssues   int64       `json:"open_issues"`
	ClosedIssues int64       `json:"closed_issues"`
	State        string      `json:"state"`
	CreatedAt    string      `json:"created_at"`
	UpdatedAt    string      `json:"updated_at"`
	DueOn        interface{} `json:"due_on"`
	ClosedAt     interface{} `json:"closed_at"`
}

type Topic string
